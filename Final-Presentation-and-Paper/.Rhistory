# confusion matrix for svm
# confusionMatrix(svm_result, svm_valid$PCOS)
# Build SVM model using modified svm_train
svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
# Create predictions using the SVM model and modified svm_valid
svm_result <- predict(svm_model, newdata = svm_valid)
# Generate confusion matrix for SVM predictions
confusionMatrix(svm_result, svm_valid$PCOS)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(`PCOS` ~ ., svm_train)
# create prediction
svm_result <- predict(svm_model, newdata = svm_valid)
# confusion matrix for svm
confusionMatrix(svm_result, svm_valid$PCOS)
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(PCOS ~ ., svm_train)
# create prediction
svm_result <- predict(svm_model, newdata = svm_valid)
# confusion matrix for svm
confusionMatrix(svm_result, svm_valid$PCOS)
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
# create some random numbers for reproduction
set.seed(59)
# Cross Validation Set-up
svm_inTrain <- createDataPartition(pcos_cleaned$`PCOS`, p=.75, list = F)
svm_train <- pcos_cleaned[svm_inTrain,]
svm_valid <- pcos_cleaned[-svm_inTrain,]
levels(svm_train$PCOS)
levels(svm_valid$PCOS)
# Convert PCOS to factor in svm_train
svm_train$PCOS <- factor(svm_train$PCOS)
# Convert PCOS to factor in svm_valid
svm_valid$PCOS <- factor(svm_valid$PCOS)
levels(svm_train$PCOS)
levels(svm_valid$PCOS)
str(svm_valid)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(PCOS ~ ., svm_train)
# create prediction
svm_result <- predict(svm_model, newdata = svm_valid)
# confusion matrix for svm
confusionMatrix(svm_result, svm_valid$PCOS)
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(PCOS ~ ., svm_train)
# create prediction
svm_result <- predict(svm_model, newdata = svm_valid)
# confusion matrix for svm
confusionMatrix(svm_result, as.numeric(svm_valid$PCOS))
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(PCOS ~ ., svm_train)
# create prediction
svm_result <- predict(svm_model, newdata = svm_valid)
# confusion matrix for svm
confusionMatrix(svm_result, as.factor(svm_valid$PCOS))
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_svm_result <- length(svm_result)
length_svm_valid <- length(svm_valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_svm_result <- length(svm_result)
length_svm_valid <- length(svm_valid$PCOS)
# Print the lengths for comparison
print(length_svm_result)
print(length_svm_valid)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(PCOS ~ ., train)
# create prediction
svm_result <- predict(svm_model, newdata = valid)
# confusion matrix for svm
confusionMatrix(svm_result, valid$PCOS)
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
levels(train$PCOS)
levels(valid$PCOS)
# Convert PCOS to factor in svm_train
train$PCOS <- factor(train$PCOS)
# Convert PCOS to factor in svm_valid
valid$PCOS <- factor(valid$PCOS)
levels(train$PCOS)
levels(valid$PCOS)
str(valid)
str(valid)
str(train)
valid$PCOS <- factor(valid$PCOS, levels = levels(train$PCOS))
levels(valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_svm_result <- length(result)
# Check the length of svm_result and svm_valid$PCOS
length_svm_result <- length(svm_result)
length_svm_valid <- length(svm_valid$PCOS)
# Print the lengths for comparison
print(length_svm_result)
print(length_svm_valid)
#create some random numbers for reproduction
set.seed(31)
# SVM
svm_model <- svm(PCOS ~ ., train)
# create prediction
svm_result <- predict(svm_model, newdata = valid)
# confusion matrix for svm
confusionMatrix(svm_result, valid$PCOS)
# # Build SVM model using modified svm_train
# svm_model <- svm(PCOS ~ ., data = svm_train, kernel = "linear")
#
# # Create predictions using the SVM model and modified svm_valid
# svm_result <- predict(svm_model, newdata = svm_valid)
#
# # Generate confusion matrix for SVM predictions
# confusionMatrix(svm_result, svm_valid$PCOS)
summary(svm_result)
#Extract accuracy from the confusion matrix
accuracy_svm <- confusionMatrix(svm_result, as.factor(valid$`PCOS`))$overall["Accuracy"]
accuracy_svm
# Compare models
model_names <- c("Decision Tree 1","Decision Tree 2", "Random Forest 1", "Random Forest 2", "Gradient Boost Machines 1", "Gradient Boost Machines 2" ,"SVM 1", "SVM 2", "Neural Network 1", "Neural Network 2", "k-Nearest 1", "k-Nearest 2")
accuracies <- c(0.8592593, 0.9185185, 0.0000, 0.9037037, 0.8814815, 0.6222222, 0.9111111, 0.0000, 0.3037037, 0.3037037, 0.7111111, 0.8814815)
results <- data.frame(Model = model_names, Accuracy = accuracies)
results <- results[order(results$Accuracy, decreasing = TRUE), ]
results
# SVM
svm_model2 <- svm(PCOS ~ Follicle_NoR + Follicle_NoL + Weight_gain + Skin_darkening + Hair_growth, train2)
# create prediction
svm_result2 <- predict(svm_model2, newdata = valid2)
# confusion matrix for svm
confusionMatrix(svm_result2, valid2$PCOS)
# create some random numbers for reproduction
set.seed(8)
# Cross Validation Set-up
svm_inTrain2 <- createDataPartition(pcos_cleaned2$PCOS, p=.75, list = FALSE)
svm_train2 <- pcos_cleaned2[svm_inTrain2,]
svm_valid2 <- pcos_cleaned2[-svm_inTrain2,]
# check the levels of PCOS using levels()
levels(svm_train2$PCOS)
levels(svm_valid2$PCOS)
# check the levels of PCOS using levels()
levels(svm_train2$PCOS)
levels(svm_valid2$PCOS)
# check the levels of PCOS using levels()
levels(svm_train2$PCOS)
levels(svm_valid2$PCOS)
# Convert PCOS to factor in svm_train
svm_train2$PCOS <- factor(svm_train2$PCOS)
# Convert PCOS to factor in svm_valid
svm_valid2$PCOS <- factor(svm_valid2$PCOS)
# rechecking levels again to ensure no NULL values
levels(svm_train2$PCOS)
levels(svm_train2$PCOS)
# rechecking levels again to ensure no NULL values
levels(svm_train2$PCOS)
levels(svm_valid2$PCOS)
# explicitly set the levels to match the levels in svm_train.
valid$PCOS <- factor(svm_valid2$PCOS, levels = levels(svm_train2$PCOS))
levels(svm_valid2$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_svm_result <- length(svm_result)
length_svm_valid2 <- length(svm_valid2$PCOS)
# Print the lengths for comparison
print(length_svm_result)
print(length_svm_valid2)
# SVM
svm_model2 <- svm(PCOS ~ Follicle_NoR + Follicle_NoL + Weight_gain + Skin_darkening + Hair_growth, svm_train2)
# create prediction
svm_result2 <- predict(svm_model2, newdata = svm_valid2)
# confusion matrix for svm
confusionMatrix(svm_result2, svm_valid2$PCOS)
summary(svm_result2)
#Extract accuracy from the confusion matrix
accuracy_svm2 <- confusionMatrix(svm_result2, svm_valid$`PCOS`)$overall["Accuracy"]
accuracy_svm2
#Extract accuracy from the confusion matrix
accuracy_svm2 <- confusionMatrix(svm_result2, svm_valid2$`PCOS`)$overall["Accuracy"]
accuracy_svm2
# Compare models
model_names <- c("Decision Tree 1","Decision Tree 2", "Random Forest 1", "Random Forest 2", "Gradient Boost Machines 1", "Gradient Boost Machines 2" ,"SVM 1", "SVM 2", "Neural Network 1", "Neural Network 2", "k-Nearest 1", "k-Nearest 2")
accuracies <- c(0.8592593, 0.9185185, 0.0000, 0.9037037, 0.8814815, 0.6222222, 0.9111111, 0.9185185, 0.3037037, 0.3037037, 0.7111111, 0.8814815)
results <- data.frame(Model = model_names, Accuracy = accuracies)
results <- results[order(results$Accuracy, decreasing = TRUE), ]
results
# Compare models
model_names <- c("Decision Tree 1","Decision Tree 2", "Random Forest 1", "Random Forest 2", "Gradient Boost Machines 1", "Gradient Boost Machines 2" ,"SVM 1", "SVM 2", "Neural Network 1", "Neural Network 2", "k-Nearest 1", "k-Nearest 2")
accuracies <- c(0.8592593, 0.9185185, 0.0000, 0.9037037, 0.8814815, 0.6222222, 0.9111111, 0.9185185, 0.3037037, 0.3037037, 0.7111111, 0.8814815)
results <- data.frame(Model = model_names, Accuracy = accuracies)
results <- results[order(results$Accuracy, decreasing = TRUE), ]
head(results)
# create some random numbers for reproduction
set.seed(30)
# Cross Validation Set-up
rf_inTrain <- createDataPartition(pcos_cleaned$`PCOS`, p=.75, list = F)
rf_train <- pcos_cleaned[rf_inTrain,]
rf_valid <- pcos_cleaned[-rf_inTrain,]
# check the levels of PCOS using levels()
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# Convert PCOS to factor in svm_train
svm_train2$PCOS <- factor(rf_train$PCOS)
# Convert PCOS to factor in svm_valid
svm_valid2$PCOS <- factor(rf_valid$PCOS)
# rechecking levels again to ensure no NULL values
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# explicitly set the levels to match the levels in svm_train.
valid$PCOS <- factor(rf_valid$PCOS, levels = levels(rf_train$PCOS))
levels(rf_valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_rf_result <- length(rf_result)
length_rf_valid <- length(rf_valid$PCOS)
# Print the lengths for comparison
print(length_rf_result)
print(length_svm_valid2)
#create some random number for reproduction
set.seed(39)
# create random forest model using the training data
rf_model <- randomForest(PCOS~., rf_train)
rf_model
# prediction
rf_result <- predict(rf_model, newdata = valid[, !colnames(valid) %in% "PCOS"])
# Create a confusion matrix
confusionMatrix(data = rf_result, reference = rf_valid$PCOS)
# create some random numbers for reproduction
set.seed(30)
# Cross Validation Set-up
rf_inTrain <- createDataPartition(pcos_cleaned$`PCOS`, p=.75, list = F)
rf_train <- pcos_cleaned[rf_inTrain,]
rf_valid <- pcos_cleaned[-rf_inTrain,]
# check the levels of PCOS using levels()
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# Convert PCOS to factor in svm_train
rf_train$PCOS <- factor(rf_train$PCOS)
# Convert PCOS to factor in svm_valid
rf_valid$PCOS <- factor(rf_valid$PCOS)
# rechecking levels again to ensure no NULL values
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# explicitly set the levels to match the levels in svm_train.
valid$PCOS <- factor(rf_valid$PCOS, levels = levels(rf_train$PCOS))
levels(rf_valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_rf_result <- length(rf_result)
length_rf_valid <- length(rf_valid$PCOS)
# Print the lengths for comparison
print(length_rf_result)
print(length_svm_valid2)
#create some random number for reproduction
set.seed(39)
# create random forest model using the training data
rf_model <- randomForest(PCOS~., rf_train)
rf_model
# prediction
rf_result <- predict(rf_model, newdata = valid[, !colnames(valid) %in% "PCOS"])
# Create a confusion matrix
confusionMatrix(data = rf_result, reference = rf_valid$PCOS)
# plot for rf_model
varImpPlot(rf_model)
# Extract accuracy from the confusion matrix for the rf_model
accuracy_rf <- confusionMatrix(rf_result, valid$PCOS)$overall["Accuracy"]
# Extract accuracy from the confusion matrix for the rf_model
accuracy_rf <- confusionMatrix(rf_result, valid$PCOS)$overall["Accuracy"]
accuracy_rf
# create some random numbers for reproduction
set.seed(30)
# Cross Validation Set-up
rf_inTrain <- createDataPartition(pcos_cleaned$`PCOS`, p=.75, list = F)
rf_train <- pcos_cleaned[rf_inTrain,]
rf_valid <- pcos_cleaned[-rf_inTrain,]
# check the levels of PCOS using levels()
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# Convert PCOS to factor in svm_train
rf_train$PCOS <- factor(rf_train$PCOS)
# Convert PCOS to factor in svm_valid
rf_valid$PCOS <- factor(rf_valid$PCOS)
# rechecking levels again to ensure no NULL values
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# create some random numbers for reproduction
set.seed(30)
# Cross Validation Set-up
rf_inTrain <- createDataPartition(pcos_cleaned$`PCOS`, p=.75, list = F)
rf_train <- pcos_cleaned[rf_inTrain,]
rf_valid <- pcos_cleaned[-rf_inTrain,]
# check the levels of PCOS using levels()
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# Convert PCOS to factor in svm_train
rf_train$PCOS <- factor(rf_train$PCOS)
# Convert PCOS to factor in svm_valid
rf_valid$PCOS <- factor(rf_valid$PCOS)
# rechecking levels again to ensure no NULL values
levels(rf_train$PCOS)
levels(rf_valid$PCOS)
# explicitly set the levels to match the levels in svm_train.
rf_valid$PCOS <- factor(rf_valid$PCOS, levels = levels(rf_train$PCOS))
levels(rf_valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_rf_result <- length(rf_result)
length_rf_valid <- length(rf_valid$PCOS)
# Print the lengths for comparison
print(length_rf_result)
print(length_rf_valid)
#create some random number for reproduction
set.seed(39)
# create random forest model using the training data
rf_model <- randomForest(PCOS~., rf_train)
rf_model
# prediction
rf_result <- predict(rf_model, newdata = valid[, !colnames(valid) %in% "PCOS"])
# Create a confusion matrix
confusionMatrix(data = rf_result, reference = rf_valid$PCOS)
# plot for rf_model
varImpPlot(rf_model)
# Extract accuracy from the confusion matrix for the rf_model
accuracy_rf <- confusionMatrix(rf_result, valid$PCOS)$overall["Accuracy"]
accuracy_rf
# create some random numbers for reproduction
set.seed(78)
# Cross Validation Set-up
rf_inTrain2 <- createDataPartition(pcos_cleaned2$`PCOS`, p=.75, list = F)
rf_train2 <- pcos_cleaned2[rf_inTrain2,]
rf_valid2 <- pcos_cleaned2[-rf_inTrain2,]
# check the levels of PCOS using levels()
levels(rf_train2$PCOS)
levels(rf_valid2$PCOS)
# Convert PCOS to factor in svm_train
rf_train2$PCOS <- factor(rf_train2$PCOS)
# Convert PCOS to factor in svm_valid
rf_valid2$PCOS <- factor(rf_valid2$PCOS)
# rechecking levels again to ensure no NULL values
levels(rf_train2$PCOS)
levels(rf_valid2$PCOS)
# explicitly set the levels to match the levels in svm_train.
rf_valid2$PCOS <- factor(rf_valid2$PCOS, levels = levels(rf_train2$PCOS))
levels(rf_valid2$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_rf_result2 <- length(rf_result2)
length_rf_valid2 <- length(rf_valid2$PCOS)
# Print the lengths for comparison
print(length_rf_result2)
print(length_rf_valid2)
# create some random number for reproduction
set.seed(7)
# create the second random forest model using the training data from the third decision tree
rf_model2 <- randomForest(PCOS ~ Follicle_NoR + Follicle_NoL + Weight_gain + Skin_darkening + Hair_growth, data = rf_train2)
rf_model2
# creating the prediction for the third decision tree
rf_result2 <- predict(rf_model2, newdata = rf_valid2[, !colnames(rf_valid2) %in% "PCOS"])
# Convert PCOS column to factor in rf_train2 and rf_valid2
rf_train2$PCOS <- factor(rf_train2$PCOS)
rf_valid2$PCOS <- factor(rf_valid2$PCOS)
# # Check unique levels in rf_result2 and rf_valid2$PCOS
# unique_levels_result <- unique(rf_result2)
# unique_levels_valid <- unique(rf_valid2$PCOS)
#
# # Check if the levels match
# identical(unique_levels_result, unique_levels_valid)
#
# # If levels do not match, manually set levels in rf_result2 to match those in rf_valid2$PCOS
# levels(rf_result2) <- levels(rf_valid2$PCOS)
#
# Convert rf_result2 to factor and align levels with rf_valid2$PCOS
rf_result2_factor <- factor(rf_result2, levels = levels(rf_valid2$PCOS))
# Create a confusion matrix
confusionMatrix(data = rf_result2_factor, reference = rf_valid2$PCOS)
# create some random number for reproduction
set.seed(7)
# create the second random forest model using the training data from the third decision tree
rf_model2 <- randomForest(PCOS ~ Follicle_NoR + Follicle_NoL + Weight_gain + Skin_darkening + Hair_growth, data = rf_train2)
rf_model2
# creating the prediction for the third decision tree
rf_result2 <- predict(rf_model2, newdata = rf_valid2[, !colnames(rf_valid2) %in% "PCOS"])
# Convert PCOS column to factor in rf_train2 and rf_valid2
rf_train2$PCOS <- factor(rf_train2$PCOS)
rf_valid2$PCOS <- factor(rf_valid2$PCOS)
# # Check unique levels in rf_result2 and rf_valid2$PCOS
# unique_levels_result <- unique(rf_result2)
# unique_levels_valid <- unique(rf_valid2$PCOS)
#
# # Check if the levels match
# identical(unique_levels_result, unique_levels_valid)
#
# # If levels do not match, manually set levels in rf_result2 to match those in rf_valid2$PCOS
# levels(rf_result2) <- levels(rf_valid2$PCOS)
#
# Convert rf_result2 to factor and align levels with rf_valid2$PCOS
rf_result2_factor <- factor(rf_result2, levels = levels(rf_valid2$PCOS))
# Create a confusion matrix
confusionMatrix(data = rf_result2_factor, reference = rf_valid2$PCOS)
# plot for the second rf_model
varImpPlot(rf_model2)
# table for rf_model2 variable contribution
varImp(rf_model2) %>% kable()
# Extract accuracy from the confusion matrix for the rf_model2
accuracy_rf2 <- confusionMatrix(data = rf_result2_factor, reference = rf_valid2$PCOS)$overall["Accuracy"]
accuracy_rf2
# Compare models
model_names <- c("Decision Tree 1","Decision Tree 2", "Random Forest 1", "Random Forest 2", "Gradient Boost Machines 1", "Gradient Boost Machines 2" ,"SVM 1", "SVM 2", "Neural Network 1", "Neural Network 2", "k-Nearest 1", "k-Nearest 2")
accuracies <- c(0.8592593, 0.9185185, 0.6148148, 0.9037037, 0.8814815, 0.6222222, 0.9111111, 0.9185185, 0.3037037, 0.3037037, 0.7111111, 0.8814815)
results <- data.frame(Model = model_names, Accuracy = accuracies)
results <- results[order(results$Accuracy, decreasing = TRUE), ]
head(results)
levels(nn_train$PCOS)
# create some random numbers for reproduction
set.seed(67)
# Cross Validation Set-up
nn_inTrain <- createDataPartition(pcos_cleaned$PCOS, p=.75, list = F)
nn_train <- pcos_cleaned[nn_inTrain,]
nn_valid <- pcos_cleaned[-nn_inTrain,]
# check the levels of PCOS using levels()
levels(nn_train$PCOS)
levels(nn_valid$PCOS)
# Convert PCOS to factor in svm_train
nn_train$PCOS <- factor(nn_train$PCOS)
# Convert PCOS to factor in svm_valid
nn_valid$PCOS <- factor(nn_valid$PCOS)
# rechecking levels again to ensure no NULL values
levels(nn_train$PCOS)
levels(nn_valid$PCOS)
# explicitly set the levels to match the levels in svm_train.
nn_valid$PCOS <- factor(nn_valid$PCOS, levels = levels(nn_train$PCOS))
levels(nn_valid$PCOS)
# Check the length of svm_result and svm_valid$PCOS
length_nn_result <- length(nn_result)
# create some random numbers for reproduction
set.seed(67)
# Cross Validation Set-up
nn_inTrain <- createDataPartition(pcos_cleaned$PCOS, p=.75, list = F)
nn_train <- pcos_cleaned[nn_inTrain,]
nn_valid <- pcos_cleaned[-nn_inTrain,]
# check the levels of PCOS using levels()
levels(nn_train$PCOS)
levels(nn_valid$PCOS)
# Convert PCOS to factor in svm_train
nn_train$PCOS <- factor(nn_train$PCOS)
# Convert PCOS to factor in svm_valid
nn_valid$PCOS <- factor(nn_valid$PCOS)
# rechecking levels again to ensure no NULL values
levels(nn_train$PCOS)
levels(nn_valid$PCOS)
# explicitly set the levels to match the levels in nn_train.
nn_valid$PCOS <- factor(nn_valid$PCOS, levels = levels(nn_train$PCOS))
levels(nn_valid$PCOS)
# Check the length of nn_result and nn_valid$PCOS
length_nn_result <- length(nn_result)
# set a seed for reproducibility purposes
set.seed(19)
# create the model
nn_model <- neuralnet(`PCOS`~.,
data = nn_train,
hidden = c(12, 8),  # Specify the number of hidden layers and neurons
linear.output = FALSE,
stepmax = 20000  # Increase the maximum number of iterations
)
# plot for rf_model
varImpPlot(rf_model)
# table for rf_model variable contribution
varImp(rf_model) %>% kable()
